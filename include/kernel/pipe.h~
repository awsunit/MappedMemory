/*
/
  Copyright 2020
  Shangjin Li
  Todd Gilbert

  This file contains declarations for a struct which represents a pipe.

  A pipe allows interprocess communication by allowing reading and writing
  to the pipe by a parent process and child process. Note that inheritance
  will allow for all ancestors of parent to access pipe.

/
*/
/**/
#ifndef _PIPE_H_
#define _PIPE_H_
/**/
#include <stdint.h>
#include <kernel/synch.h>
#include <kernel/fs.h>
#include <lib/errcode.h>
/**/
#define PIPE_SZ 512
/**/
/*
  Defines the pipe, directly accessed by kernel only.

*/
struct kpipe {
  char *buffer[PIPE_SZ];
  struct spinlock pipe_lock;
  struct condvar pipe_notempty_cv;
  struct condvar pipe_full_cv;
  size_t read_ofs, write_ofs;
  uint64_t readers, writers;
  int fd_reader, fd_writer;
};
/**/
/*
  Initializes a pipe

  Returns: ERR_OK on success, fails otherwise
*/
err_t kpipe_init(struct file **f, int fd_reader, int fd_writer);
/*
  Allocates space in kernel for pipe struct

  Returns: pointer to region allocated
*/
struct kpipe* kpipe_allocate();
/*
   Closes pipe, deallocates memory when appropriate
*/
void kpipe_close(struct kpipe *p);
/*
  Attempts to read count bytes from p.buffer to buf.
  If buffer is empty, waits on writers.

  Returns number of bytes read, or EOF iff p.buffer is empty and p.writers == 0.
*/
int kpipe_read(struct kpipe *p, const char *buf, size_t count);
/*
  Attempts to write count bytes from buf to p.buffer. If buffer full, waits on readers.

  Returns number of bytes written, or ERR_PIPEDEAF iff p.readers == 0
*/
int kpipe_write(struct kpipe *p, const char *buf, size_t count);
/**/
#endif  // _PIPE_H_
